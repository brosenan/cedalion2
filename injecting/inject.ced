'/bootstrap':defAtom(fragment::'/bootstrap':type).
'/bootstrap':signature(injectThisFile(Fragment)::'/bootstrap':statement,[Fragment::fragment]).
'/bootstrap':signature(inject(Fragment,Container)::'/impred':impred,[Fragment::fragment,Container::'/bootstrap':string]).
'/util':behavior(inject(Fragment,Container)::'/impred':impred,!'should assert statements from associated with Fragment to Container', ('/impred':simulate(inject(myFragment,!test),['/impred':task('/impred':assert(Statement),_,'/nodalion':voidType)],_),builtin:parseTerm(Statement::'/bootstrap':statement,Name,_),'/bootstrap':true(builtin:strcat(!'test@',_,Name)),'/bootstrap':true('/containers':uncontainerize(Statement::'/bootstrap':statement,StatementPrime::'/bootstrap':statement,!test)),'/util':assertEqual(StatementPrime,'/bootstrap':defAtom('/injecting:myFragment':'test1'::'/bootstrap':pred),'/bootstrap':statement))).
'/impred':clause(inject(Frag,Container),'/impred':conj('/impred':pred(builtin:findall(S,'/bootstrap':statement, (builtin:loadedStatement(File,injectThisFile(Frag),_),builtin:loadedStatement(File,SPrime,_),'/bootstrap2':termTraversal(SPrime::'/bootstrap':statement,inject(Frag),_,S::'/bootstrap':statement)),Statements)),'/impred':assertContainerizedAll(Statements,Container))).
'/bootstrap':signature(inject(Fragment)::'/bootstrap2':traversal,[Fragment::fragment]).
'/bootstrap':defAtom(myFragment::fragment).
'/util':behavior(inject(Fragment)::'/bootstrap2':traversal,!'should not modify terms not in the fragment\'s namespace', ('/bootstrap2':termTraversal(('/Functional':eval('/Functional':const(5),'/bootstrap':number,X):-builtin:true)::'/bootstrap':statement,inject(myFragment),_,TTerm),'/util':assertEqual(TTerm, ('/Functional':eval('/Functional':const(5),'/bootstrap':number,X):-builtin:true)::'/bootstrap':statement,'/bootstrap':typedTerm))).
'/util':behavior(inject(Fragment)::'/bootstrap2':traversal,!'should modify terms in the fragment\'s namespace', ('/bootstrap2':termTraversal(inject(A,B)::'/impred':impred,inject(myFragment),_,TTerm),builtin:parseTerm(TTerm,Name,_),'/util':assertEqual(Name,!'/injecting:myFragment#inject','/bootstrap':string))).
annotation:shrink(('/bootstrap2':traverseRename(inject(Frag),TTerm,Name,NamePrime):-builtin:parseTerm(Frag::fragment,FragName,_),splitName(FragName,NS,FragSuffix),splitName(Name,NS,Suffix),'/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(NS),'/Functional':concat,'/Functional':const(! (:))),'/Functional':concat,'/Functional':const(FragSuffix)),'/Functional':concat,'/Functional':const(!'#')),'/Functional':concat,'/Functional':const(Suffix)),'/bootstrap':string,NamePrime))).
'/bootstrap':signature(splitName(FragName,Namespace,FragSuffix)::'/bootstrap':pred,[FragName::'/bootstrap':string,Namespace::'/bootstrap':string,FragSuffix::'/bootstrap':string]).
splitName(Name,NS,Suffix):-builtin:charCodes(Name,Codes),'/bootstrap':append(NSCodes,[annotation:minComment(35,!'"#"')|SuffixCodes],Codes,'/bootstrap':number),builtin:charCodes(NS,NSCodes),builtin:charCodes(Suffix,SuffixCodes).
