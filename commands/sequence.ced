'/bootstrap':defAtom(action::'/bootstrap':type).
'/bootstrap':signature(seq(Cmd1,Cmd2)::'/Functional':expr(action),[Cmd1::'/Functional':expr(action),Cmd2::'/Functional':expr(action)]).
'/bootstrap':projection(seq(Cmd1,Cmd2)::'/Functional':expr(action),'/bootstrap':vert(['/bootstrap':horiz(['/bootstrap':vis(Cmd1::'/Functional':expr(action)),'/bootstrap':label(! (;))]),'/bootstrap':vis(Cmd2::'/Functional':expr(action))])).
'/bootstrap':alias(seq(Cmd1,Cmd2)::'/Functional':expr(action),! (;)).
'/bootstrap':defAtom(done::action).
'/util':behavior(seq(Cmd1,Cmd2)::'/Functional':expr(action),!'should evaluate to the second action if the first action is "done"', ('/Functional':eval(seq('/Functional':const(done),'/Functional':const(done)),action,Done),'/util':assertEqual(Done,done,action))).
'/bootstrap':defAtom(question::'/bootstrap':type).
'/bootstrap':defAtom(interaction::'/bootstrap':type).
'/bootstrap':sigProj(cont(Interaction,Cont)::action,[Interaction::interaction,Cont::'/Functional':expr(action)],'/bootstrap':horiz(['/bootstrap':vis(Interaction::interaction),'/bootstrap':symbol(8674),'/bootstrap':lowered('/bootstrap':background('/bootstrap':vis(Cont::'/Functional':expr(action)),cpi:rgb(255,255,255)))])).
'/bootstrap':sigProj(qna(Question,Answer)::interaction,[Question::question,Answer::'/bootstrap':typedTerm],'/bootstrap':horiz(['/bootstrap':vis(Question::question),'/bootstrap':label(! (?)),'/bootstrap':vis(Answer::'/bootstrap':typedTerm)])).
'/bootstrap':defAtom(someInteraction::interaction).
'/util':behavior(seq(Cmd1,Cmd2)::'/Functional':expr(action),!'should evaluate to a continuation if the first action is a continuation', ('/Functional':eval(seq('/Functional':const(cont(someInteraction,Cont)),'/Functional':const(done)),action,Action),'/util':assertEqual(Action,cont(someInteraction,seq(Cont,'/Functional':const(done))),action))).
'/bootstrap':signature(throw(Q)::action,[Q::question]).
'/util':behavior(seq(Cmd1,Cmd2)::'/Functional':expr(action),!'should evaluate to throw if Cmd1 evaluates to throw', ('/Functional':eval(seq('/Functional':const(throw(Q)),'/Functional':const(done)),action,Action),'/util':assertEqual(Action,throw(Q),action))).
'/Functional':def(seq(A,B),action,'/Functional':switch(A,action,'/Functional':case(cont(Interaction,Cont),'/Functional':const(cont(Interaction,seq(Cont,B))),'/Functional':case(throw(Q),'/Functional':const(throw(Q)),'/Functional':otherwise(B))))).
