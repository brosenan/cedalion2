'/bootstrap':defAtom(traversal::'/bootstrap':type).
'/bootstrap':signature(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,[TTerm1::'/bootstrap':typedTerm,Trav1::'/bootstrap2':traversal,Container::'/bootstrap':string,Trav2::'/bootstrap2':traversal,TTerm2::'/bootstrap':typedTerm]).
'/bootstrap':deprecated(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred).
'/bootstrap':deprecationReplacement(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2),'/bootstrap':pred,'/bootstrap2':termTraversal(TTerm1,Trav1,Trav2,TTerm2)).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should consule traverseAtomic for non-compound terms', (termTraversal(2::'/bootstrap':number,testTraversal(!'test1'),!local,TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,3::'/bootstrap':number,'/bootstrap':typedTerm),'/util':assertEqual(TraversalAfter,testTraversal(!atomic),traversal))).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseUp for compound terms',builtin:catch((termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test1'),!local,TraversalAfter,TTermAfter),builtin:fail),testTraversalException(!up),builtin:true)).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should pass the result of traverseUp to the children',builtin:catch((termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test2'),!local,TraversalAfter,TTermAfter),builtin:fail),testTraversalException(!four),builtin:true)).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should chain the traversal state among the children', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test3'),!local,TraversalAfter,TTermAfter),'/util':assertEqual(TraversalAfter,testTraversal(!'test3-done'),traversal),'/util':assertEqual(TTermAfter,builtin:succ(5,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should default traverseAtomic and traverseUp to doing nothing', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test4'),!local,TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,builtin:succ(6,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseDown at the end of the traversal of a compound term',builtin:catch((termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test5'),!local,TraversalAfter,TTermAfter),builtin:fail),testTraversalException(!down),builtin:true)).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should provide traverseDown both the traversal before the compound and after the args',termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test7'),!local,TraversalAfter,TTermAfter)).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should replace the term with what traverseDown provides', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test8'),!local,TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,2::'/bootstrap':number,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseRename and rename accordingly', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test6'),!local,TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,builtin:'succ123'(4,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseAround and replace value upon success', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test9'),!local,TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,builtin:succ(7,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
annotation:shrink((termTraversal(Term1::Type,Trav1,Container,Trav4,Term3::TypePrime):-builtin:if('/bootstrap2':traverseAround(Trav1,Term1::Type,Term3::TypePrime,Trav4),builtin:true,builtin:if(builtin:compound(Term1::Type), ('/bootstrap2':tryTraverseUp(Trav1,Term1::Type,Trav2),'/cedalion2':tryInContainer('/bootstrap':safeParseTerm(Term1::Type,Name,Args),Container,_,builtin:parseTerm(Term1::Type,Name,Args)),traverseChildren(Args,Trav2,Container,Trav3,ArgsPrime),'/bootstrap2':tryTraverseRename(Trav1,Term1::Type,Name,NamePrime),builtin:parseTerm(Term2::Type,NamePrime,ArgsPrime),'/bootstrap2':tryTraverseDown(Trav1,Trav3,Term2::Type,Term3::TypePrime,Trav4)),'/bootstrap2':tryTraverseAtomic(Trav1,Term1::Type,Term3::TypePrime,Trav4))))).
'/bootstrap':signature(traverseChildren(Args,Trav1,Container,Trav2,ArgsPrime)::'/bootstrap':pred,[Args::'/bootstrap':list('/bootstrap':typedTerm),Trav1::traversal,Container::'/bootstrap':string,Trav2::traversal,ArgsPrime::'/bootstrap':list('/bootstrap':typedTerm)]).
traverseChildren([],Trav,_,Trav,[]):-builtin:true.
annotation:shrink((traverseChildren([Arg|Args],Trav1,Container,Trav3,[ArgPrime|ArgsPrime]):-termTraversal(Arg,Trav1,Container,Trav2,ArgPrime),traverseChildren(Args,Trav2,Container,Trav3,ArgsPrime))).
