'/bootstrap':signature(collect(Set,List)::traversal,[Set::'/bootstrap':set('/bootstrap':typedTerm),List::'/bootstrap':list('/bootstrap':typedTerm)]).
'/bootstrap':projection(collect(Set,List)::traversal,'/bootstrap':horiz(['/bootstrap':label(!'collect members of'),'/bootstrap':vis(Set::'/bootstrap':set('/bootstrap':typedTerm)),'/bootstrap':label(!into),'/bootstrap':vis(List::'/bootstrap':list('/bootstrap':typedTerm))])).
'/util':behavior(collect(Set,List)::traversal,!'should collect members of the set', (traverseAround(collect('/bootstrap':listSet([1::'/bootstrap':number,2::'/bootstrap':number]),[]),1::'/bootstrap':number,TTerm,Trav),'/util':assertEqual(Trav,collect('/bootstrap':listSet([1::'/bootstrap':number,2::'/bootstrap':number]),[1::'/bootstrap':number]),traversal),'/util':assertEqual(TTerm,1::'/bootstrap':number,'/bootstrap':typedTerm))).
'/util':behavior(collect(Set,List)::traversal,!'should not go around terms that are not members of the set',\+traverseAround(collect('/bootstrap':listSet([1::'/bootstrap':number,2::'/bootstrap':number]),[]),3::'/bootstrap':number,_::_,_)).
annotation:shrink((traverseAround(collect(Set,List),TTerm,TTerm,collect(Set,[TTerm|List])):- \+ \+'/bootstrap':member(TTerm,Set,'/bootstrap':typedTerm))).
'/bootstrap':unitTest(termTraversal((\+ \+'/bootstrap':member(TTerm,Set,'/bootstrap':typedTerm))::'/bootstrap':pred,collect('/bootstrap':set(TVar,builtin:var(TVar)),[]),!local,collect('/bootstrap':set(TVar,builtin:var(TVar)),[Set::'/bootstrap':set('/bootstrap':typedTerm),TTerm::'/bootstrap':typedTerm]), (\+ \+'/bootstrap':member(TTerm,Set,'/bootstrap':typedTerm))::'/bootstrap':pred)).
