'/bootstrap':signature(skipTo(Path)::traversal,[Path::cpi:path]).
'/util':behavior(skipTo(Path)::traversal,!'should skip paths that are not prefixes of Path', (traverseAround(comp(skipTo(cpi:path(!'foo.ced',[2,1])),track(cpi:path(!'foo.ced',[1]))),TTerm,TTermPrime,Trav),'/util':assertEqual(TTermPrime,TTerm,'/bootstrap':typedTerm),'/util':assertEqual(Trav,comp(skipTo(cpi:path(!'foo.ced',[2,1])),track(cpi:path(!'foo.ced',[2]))),traversal))).
'/util':behavior(skipTo(Path)::traversal,!'should not skip paths that are prefixes of Path',\+traverseAround(comp(skipTo(cpi:path(!'foo.ced',[2,1])),track(cpi:path(!'foo.ced',[2]))),_,_,_)).
'/util':behavior(skipTo(Path)::traversal,!'should not skip paths starting with Path',\+traverseAround(comp(skipTo(cpi:path(!'foo.ced',[2,1])),track(cpi:path(!'foo.ced',[2,1,3]))),_,_,_)).
annotation:shrink((traverseAround(comp(skipTo(cpi:path(File,Target)),track(cpi:path(File,Curr))),TTerm,TTerm,comp(skipTo(cpi:path(File,Target)),track(cpi:path(File,CurrPrime)))):- \+'/bootstrap':append(Curr,_,Target,'/bootstrap':number),\+'/bootstrap':append(Target,_,Curr,'/bootstrap':number),pathLeft(cpi:path(File,Curr),cpi:path(File,CurrPrime)))).
'/bootstrap':unitTest(termTraversal([2,2,2,2]::'/bootstrap':list('/bootstrap':number),comp(comp(skipTo(cpi:path(!'f.ced',[2,2,1])),track(cpi:path(!'f.ced',[]))),testTraversal(!'test11')),!local,comp(comp(skipTo(cpi:path(!'f.ced',[2,2,1])),track(cpi:path(!'f.ced',[]))),testTraversal(!'test11')),[2,2,3,2]::'/bootstrap':list('/bootstrap':number))).
