'/bootstrap':defAtom(bar::'/bootstrap':type).
'/bootstrap':signature(foo(N)::bar,[N::'/bootstrap':number]).
'/bootstrap':signature(fooMarker(N)::'/bootstrap':marker,[N::'/bootstrap':number]).
'/bootstrap':signature(check(TTerm,Path,Marker)::'/bootstrap':pred,[TTerm::'/bootstrap':typedTerm,Path::cpi:path,Marker::'/bootstrap':locMarker]).
'/util':behavior(check(TTerm,Path,Marker)::'/bootstrap':pred,!'should emit the fooMarker for foo(_)::bar in container test', (check(foo(2)::bar,cpi:path(!'foo.ced',[2,1,3]),'/bootstrap':marker(Path,fooMarker(N))),'/util':assertEqual(Path,cpi:path(!'foo.ced',[2,1,3]),cpi:path),'/util':assertEqual(N,2,'/bootstrap':number))).
check(foo(N)::bar,Path,'/bootstrap':marker(Path,fooMarker(N))):-builtin:true.
'test@/containers':exists:-builtin:true.
check(_,_,_):-builtin:fail.
'/util':behavior(check(TTerm,Path,Marker)::'/bootstrap':pred,!'should apply /bootstrap:check if Path is a top-level statement',check((builtin:fail:-builtin:true)::'/bootstrap':statement,cpi:path(!'foo.ced',[2,1]),'/bootstrap':marker(cpi:path(!'foo.ced',[2,1]),'/bootstrap':topLevel))).
'/util':behavior(check(TTerm,Path,Marker)::'/bootstrap':pred,!'should apply not /bootstrap:check if Path is not a top-level statement',\+check((builtin:fail:-builtin:true)::'/bootstrap':statement,cpi:path(!'foo.ced',[2]),'/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap':topLevel))).
'/util':behavior(check(TTerm,Path,Marker)::'/bootstrap':pred,!'should extract variable names',check(('$VAR$'(!'X'):-builtin:true)::'/bootstrap':statement,cpi:path(!'foo.ced',[1]),'/bootstrap':marker(cpi:path(!'foo.ced',[1,1]),'/bootstrap':varType(_::'/bootstrap':pred)))).
check(TTerm,Path,MarkerPrime):-'ast2term'(TTerm,TTermPrime,VNs),'/bootstrap':statementPath(Path),'/bootstrap':check(Path,TTermPrime,VNs,Marker),'term2ast'(Marker::'/bootstrap':locMarker,VNs,MarkerPrime::'/bootstrap':locMarker).
