'/bootstrap':defAtom(traversal::'/bootstrap':type).
'/bootstrap':signature(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,[TTerm1::'/bootstrap':typedTerm,Trav1::traversal,Trav2::traversal,TTerm2::'/bootstrap':typedTerm]).
'/bootstrap':deprecated(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred).
'/bootstrap':signature(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2)::'/bootstrap':pred,[TTerm1::'/bootstrap':typedTerm,Trav1::traversal,Container::'/bootstrap':string,Trav2::traversal,TTerm2::'/bootstrap':typedTerm]).
'/bootstrap':deprecationReplacement(termTraversal(TTerm1,Trav1,Container,Trav2,TTerm2),'/bootstrap':pred,termTraversal(TTerm1,Trav1,Trav2,TTerm2)).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should consule traverseAtomic for non-compound terms', (termTraversal(2::'/bootstrap':number,testTraversal(!'test1'),TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,3::'/bootstrap':number,'/bootstrap':typedTerm),'/util':assertEqual(TraversalAfter,testTraversal(!atomic),traversal))).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseUp for compound terms',builtin:catch((termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test1'),TraversalAfter,TTermAfter),builtin:fail),testTraversalException(!up),builtin:true)).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should pass the result of traverseUp to the children',builtin:catch((termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test2'),TraversalAfter,TTermAfter),builtin:fail),testTraversalException(!four),builtin:true)).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should chain the traversal state among the children', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test3'),TraversalAfter,TTermAfter),'/util':assertEqual(TraversalAfter,testTraversal(!'test3-done'),traversal),'/util':assertEqual(TTermAfter,builtin:succ(5,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should default traverseAtomic and traverseUp to doing nothing', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test4'),TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,builtin:succ(6,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseDown at the end of the traversal of a compound term',builtin:catch((termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test5'),TraversalAfter,TTermAfter),builtin:fail),testTraversalException(!down),builtin:true)).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should provide traverseDown both the traversal before the compound and after the args',termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test7'),TraversalAfter,TTermAfter)).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should replace the term with what traverseDown provides', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test8'),TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,2::'/bootstrap':number,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseRename and rename accordingly', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test6'),TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,builtin:'succ123'(4,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
'/util':behavior(termTraversal(TTerm1,Trav1,Trav2,TTerm2)::'/bootstrap':pred,!'should consult traverseAround and replace value upon success', (termTraversal(builtin:succ(4,Y)::'/bootstrap':pred,testTraversal(!'test9'),TraversalAfter,TTermAfter),'/util':assertEqual(TTermAfter,builtin:succ(7,Y)::'/bootstrap':pred,'/bootstrap':typedTerm))).
annotation:shrink((termTraversal(Term1::Type,Trav1,Trav4,Term3::TypePrime):-builtin:if(traverseAround(Trav1,Term1::Type,Term3::TypePrime,Trav4),builtin:true,builtin:if(builtin:compound(Term1::Type), (tryTraverseUp(Trav1,Term1::Type,Trav2),builtin:catch(builtin:timeout('/bootstrap':safeParseTerm(Term1::Type,Name,Args),20),_,builtin:parseTerm(Term1::Type,Name,Args)),traverseChildren(Args,Trav2,Trav3,ArgsPrime),tryTraverseRename(Trav1,Term1::Type,Name,NamePrime),builtin:parseTerm(Term2::Type,NamePrime,ArgsPrime),tryTraverseDown(Trav1,Trav3,Term2::Type,Term3::TypePrime,Trav4)),tryTraverseAtomic(Trav1,Term1::Type,Term3::TypePrime,Trav4))))).
'/bootstrap':signature(traverseChildren(Args,Trav1,Trav2,ArgsPrime)::'/bootstrap':pred,[Args::'/bootstrap':list('/bootstrap':typedTerm),Trav1::traversal,Trav2::traversal,ArgsPrime::'/bootstrap':list('/bootstrap':typedTerm)]).
traverseChildren([],Trav,Trav,[]):-builtin:true.
annotation:shrink((traverseChildren([Arg|Args],Trav1,Trav3,[ArgPrime|ArgsPrime]):-termTraversal(Arg,Trav1,Trav2,ArgPrime),traverseChildren(Args,Trav2,Trav3,ArgsPrime))).
'/bootstrap':signature(traverseAtomic(Trav1,TTerm1,TTerm2,Trav2)::'/bootstrap':pred,[Trav1::traversal,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm,Trav2::traversal]).
'/bootstrap':signature(traverseUp(Trav1,TTerm1,Trav2)::'/bootstrap':pred,[Trav1::traversal,TTerm1::'/bootstrap':typedTerm,Trav2::traversal]).
'/bootstrap':signature(traverseDown(Trav1,Trav2,TTerm1,TTerm2,Trav3)::'/bootstrap':pred,[Trav1::traversal,Trav2::traversal,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm,Trav3::traversal]).
'/bootstrap':signature(traverseRename(Trav,TTerm,Name1,Name2)::'/bootstrap':pred,[Trav::traversal,TTerm::'/bootstrap':typedTerm,Name1::'/bootstrap':string,Name2::'/bootstrap':string]).
'/bootstrap':signature(traverseAround(Trav1,TTerm1,TTerm2,Trav2)::'/bootstrap':pred,[Trav1::traversal,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm,Trav2::traversal]).
'/bootstrap':signature(tryTraverseUp(Trav1,TTerm,Trav2)::'/bootstrap':pred,[Trav1::traversal,TTerm::'/bootstrap':typedTerm,Trav2::traversal]).
annotation:shrink((tryTraverseUp(Trav1,TTerm,Trav2):-builtin:if(traverseUp(Trav1,TTerm,Trav2),builtin:true,Trav2::traversal=Trav1::traversal))).
'/bootstrap':signature(tryTraverseRename(Trav1,TTerm,Name,NamePrime)::'/bootstrap':pred,[Trav1::traversal,TTerm::'/bootstrap':typedTerm,Name::'/bootstrap':string,NamePrime::'/bootstrap':string]).
annotation:shrink((tryTraverseRename(Trav1,TTerm,Name,NamePrime):-builtin:if(traverseRename(Trav1,TTerm,Name,NamePrime),builtin:true,NamePrime::'/bootstrap':string=Name::'/bootstrap':string))).
'/bootstrap':signature(tryTraverseDown(Trav1,Trav3,TTerm1,TTerm2,Trav4)::'/bootstrap':pred,[Trav1::traversal,Trav3::traversal,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm,Trav4::traversal]).
annotation:shrink((tryTraverseDown(Trav1,Trav3,TTerm1,TTerm2,Trav4):-builtin:if(traverseDown(Trav1,Trav3,TTerm1,TTerm2,Trav4),builtin:true, (Trav3::traversal=Trav4::traversal,TTerm2=TTerm1)))).
'/bootstrap':signature(tryTraverseAtomic(Trav1,TTerm1,TTerm2,Trav4)::'/bootstrap':pred,[Trav1::traversal,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm,Trav4::traversal]).
annotation:shrink((tryTraverseAtomic(Trav1,TTerm1,TTerm2,Trav4):-builtin:if(traverseAtomic(Trav1,TTerm1,TTerm2,Trav4),builtin:true, (Trav4::traversal=Trav1::traversal,TTerm2=TTerm1)))).
