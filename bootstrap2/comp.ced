'/bootstrap':signature(comp(T1,T2)::traversal,[T1::traversal,T2::traversal]).
'/bootstrap':projection(comp(T1,T2)::traversal,'/bootstrap':horiz(['/bootstrap':vis(T1::traversal),'/bootstrap':symbol(8741),'/bootstrap':vis(T2::traversal)])).
'/bootstrap':alias(comp(T1,T2)::traversal,!'||').
'/util':behavior(comp(T1,T2)::traversal,!'should traverseUp according to both T1 and T2', (traverseUp(comp(testTraversal(!'test2'),testTraversal(!'test3')),_::_,Trav),'/util':assertEqual(Trav,comp(testTraversal(!'expect4'),testTraversal(!'test3-4')),traversal))).
annotation:shrink((traverseUp(comp(T1,T2),TTerm,comp(T1Prime,T2Prime)):-tryTraverseUp(T1,TTerm,T1Prime),tryTraverseUp(T2,TTerm,T2Prime))).
'/util':behavior(comp(T1,T2)::traversal,!'should traverseAtomic by merging both results', (traverseAtomic(comp(testTraversal(!'test3-4'),testTraversal(!foo)),4::'/bootstrap':number,X,Trav),'/util':assertEqual(Trav,comp(testTraversal(!'test3-Y'),testTraversal(!foo)),traversal),'/util':assertEqual(X,5::'/bootstrap':number,'/bootstrap':typedTerm))).
annotation:shrink((traverseAtomic(comp(T1,T2),TTerm,TTermPrime,comp(T1Prime,T2Prime)):-tryTraverseAtomic(T1,TTerm,TTerm1,T1Prime),tryTraverseAtomic(T2,TTerm,TTerm2,T2Prime),merge(TTerm,TTerm1,TTerm2,TTermPrime))).
'/util':behavior(comp(T1,T2)::traversal,!'should traverseRename by merging both results', (traverseRename(comp(testTraversal(!foo),testTraversal(!'test6')),builtin:succ(4,Y)::'/bootstrap':pred,!foo,Res),'/util':assertEqual(Res,!'foo123','/bootstrap':string))).
annotation:shrink((traverseRename(comp(T1,T2),TTerm,Name,NamePrime):-tryTraverseRename(T1,TTerm,Name,Name1),tryTraverseRename(T2,TTerm,Name,Name2),merge(Name::'/bootstrap':string,Name1::'/bootstrap':string,Name2::'/bootstrap':string,NamePrime::'/bootstrap':string))).
'/util':behavior(comp(T1,T2)::traversal,!'should traverseDown by merging both results', (traverseDown(comp(testTraversal(!'test10'),testTraversal(!foo)),comp(testTraversal(!'test10-1'),testTraversal(!bar)),4::'/bootstrap':number,X,Trav),'/util':assertEqual(Trav,comp(testTraversal(!'test10-2'),testTraversal(!bar)),traversal),'/util':assertEqual(X,5::'/bootstrap':number,'/bootstrap':typedTerm))).
annotation:shrink((traverseDown(comp(T1,T2),comp(T1Prime,T2Prime),TTerm,TTermPrime,comp(T1PrimePrime,T2PrimePrime)):-tryTraverseDown(T1,T1Prime,TTerm,TTerm1,T1PrimePrime),tryTraverseDown(T2,T2Prime,TTerm,TTerm2,T2PrimePrime),merge(TTerm,TTerm1,TTerm2,TTermPrime))).
'/util':behavior(comp(T1,T2)::traversal,!'should traverseAround if T1 traverses around', (traverseAround(comp(testTraversal(!'test9'),testTraversal(!foo)),4::'/bootstrap':number,X,Trav),'/util':assertEqual(X,7::'/bootstrap':number,'/bootstrap':typedTerm),'/util':assertEqual(Trav,comp(testTraversal(!'test9-done'),testTraversal(!foo)),traversal))).
traverseAround(comp(T1,T2),TTerm,TTermPrime,comp(T1Prime,T2)):-traverseAround(T1,TTerm,TTermPrime,T1Prime).
'/util':behavior(comp(T1,T2)::traversal,!'should traverseAround if T2 traverses around', (traverseAround(comp(testTraversal(!foo),testTraversal(!'test9')),4::'/bootstrap':number,X,Trav),'/util':assertEqual(X,7::'/bootstrap':number,'/bootstrap':typedTerm),'/util':assertEqual(Trav,comp(testTraversal(!foo),testTraversal(!'test9-done')),traversal))).
traverseAround(comp(T1,T2),TTerm,TTermPrime,comp(T1,T2Prime)):-traverseAround(T2,TTerm,TTermPrime,T2Prime).
'/bootstrap':signature(merge(TTerm,TTerm1,TTerm2,TTermPrime)::'/bootstrap':pred,[TTerm::'/bootstrap':typedTerm,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm,TTermPrime::'/bootstrap':typedTerm]).
'/util':behavior(merge(TTerm,TTerm1,TTerm2,TTermPrime)::'/bootstrap':pred,!'should take TTerm1 if only it changed', (merge(A::'/bootstrap':number,B::'/bootstrap':number,A::'/bootstrap':number,TTerm),'/util':assertEqual(TTerm,B::'/bootstrap':number,'/bootstrap':typedTerm))).
'/util':behavior(merge(TTerm,TTerm1,TTerm2,TTermPrime)::'/bootstrap':pred,!'should take TTerm2 if only it changed', (merge(A::'/bootstrap':number,A::'/bootstrap':number,B::'/bootstrap':number,TTerm),'/util':assertEqual(TTerm,B::'/bootstrap':number,'/bootstrap':typedTerm))).
'/bootstrap':signature(conflict(TTerm,TTerm1,TTerm2)::'/bootstrap':exception,[TTerm::'/bootstrap':typedTerm,TTerm1::'/bootstrap':typedTerm,TTerm2::'/bootstrap':typedTerm]).
'/util':behavior(merge(TTerm,TTerm1,TTerm2,TTermPrime)::'/bootstrap':pred,!'should throw a conflict exception if both TTerm1 and TTerm2 changed',builtin:catch((merge(1::'/bootstrap':number,2::'/bootstrap':number,3::'/bootstrap':number,TTerm),builtin:fail),conflict(TTerm,TTerm1,TTerm2), ('/util':assertEqual(TTerm,1::'/bootstrap':number,'/bootstrap':typedTerm),'/util':assertEqual(TTerm1,2::'/bootstrap':number,'/bootstrap':typedTerm),'/util':assertEqual(TTerm2,3::'/bootstrap':number,'/bootstrap':typedTerm)))).
annotation:shrink((merge(TTerm,TTerm1,TTerm2,TTermPrime):-builtin:if(builtin:equals(TTerm,TTerm2),TTermPrime=TTerm1,builtin:if(builtin:equals(TTerm,TTerm1),TTermPrime=TTerm2,builtin:throw(conflict(TTerm,TTerm1,TTerm2)))))).
