'/bootstrap':signature(try(Cmd,Q,An,Catch)::'/Functional':expr(action),[Cmd::'/Functional':expr(action),Q::question,An::'/bootstrap':typedTerm,Catch::'/Functional':expr(action)]).
'/bootstrap':projection(try(Cmd,Q,An,Catch)::'/Functional':expr(action),'/bootstrap':vert(['/bootstrap':label(!'try:'),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Cmd::'/Functional':expr(action))]),'/bootstrap':horiz(['/bootstrap':label(!catch),'/bootstrap':vis(Q::question),'/bootstrap':label(! (?)),'/bootstrap':vis(An::'/bootstrap':typedTerm)]),'/bootstrap':horiz(['/bootstrap':label(!'    '),'/bootstrap':vis(Catch::'/Functional':expr(action))])])).
'/util':behavior(try(Cmd,Q,An,Catch)::'/Functional':expr(action),!'should evaluate to Cmd as long as it does not throw', ('/Functional':eval(try(interact(someInteraction(8)),Q,An,interact(someInteraction)),action,Action),'/util':assertEqual(Action,cont(someInteraction(8),'/Functional':const(done)),action))).
'/bootstrap':signature(someQuestion(N)::question,[N::'/bootstrap':number]).
'/util':behavior(try(Cmd,Q,An,Catch)::'/Functional':expr(action),!'should evaluate to a Q&A if Cmd throws', ('/Functional':eval(try('/Functional':const(throw(someQuestion(3))),Q,N::'/bootstrap':number,interact(someInteraction(N))),action,Action),'/util':assertEqual(Action,cont(qna(someQuestion(3),N::'/bootstrap':number),interact(someInteraction(N))),action))).
'/util':behavior(try(Cmd,Q,An,Catch)::'/Functional':expr(action),!'should throw if Q does not match the thrown question', ('/Functional':eval(try('/Functional':const(throw(someQuestion(3))),someQuestion(4),N::'/bootstrap':number,interact(someInteraction(N))),action,Action),'/util':assertEqual(Action,throw(someQuestion(3)),action))).
'/Functional':def(try(Cmd,Q,An,Catch),action,'/Functional':switch(Cmd,action,'/Functional':case(throw(QPrime),'/Functional':if(Q::question=QPrime::question,'/Functional':const(cont(qna(QPrime,An),Catch)),'/Functional':const(throw(QPrime))),'/Functional':otherwise(Cmd)))).
