'/bootstrap':signature(decorateAST(Path,Markers)::traversal,[Path::cpi:path,Markers::'/bootstrap':list('/bootstrap':locMarker)]).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should update the path going up', (traverseUp(decorateAST(cpi:path(!'foo.ced',[1,2]),[]), (builtin:true:-builtin:true)::'/bootstrap':statement,decorateAST(Path,_)),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,2,1]),cpi:path))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should update the path going left on  atomic', (traverseAtomic(decorateAST(cpi:path(!'foo.ced',[1,2]),[]),2::'/bootstrap':number,_::_,decorateAST(Path,_)),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,3]),cpi:path))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should update the path going down', (traverseDown(decorateAST(cpi:path(!'foo.ced',[1,2]),[]),decorateAST(cpi:path(!'foo.ced',[1,2,3]),[]), (builtin:true:-builtin:true)::'/bootstrap':statement,_::_,decorateAST(Path,_)),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,3]),cpi:path))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should consult check in the container going up', (traverseUp(decorateAST(cpi:path(!'foo.ced',[1,2]),['/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap':varType(X::'/bootstrap':number))]),foo(5)::bar,decorateAST(_,Markers)),'/util':assertEqual(Markers,['/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap':varType(X::'/bootstrap':number)),'/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),fooMarker(5))],'/bootstrap':list('/bootstrap':locMarker)))).
'/bootstrap':signature(decoratedAST(Term,Path,Markers)::Type,[Term::Type,Path::cpi:path,Markers::'/bootstrap':list('/bootstrap':marker)]).
'/bootstrap':projection(decoratedAST(Term,Path,Markers)::Type,'/bootstrap':lineBorder('/bootstrap':vert(['/bootstrap':vis(Term::Type),'/bootstrap':halfSize('/bootstrap':horiz(['/bootstrap':vis(Path::cpi:path),cpi:vis(Markers::'/bootstrap':list('/bootstrap':marker),'/bootstrap':vert)]))]),1,cpi:rgb(0,0,255))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should decorate the terms going down', (traverseDown(decorateAST(cpi:path(!'foo.ced',[1,2]),[]),decorateAST(cpi:path(!'foo.ced',[1,2,3]),['/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),fooMarker(5))]), (builtin:true:-builtin:true)::'/bootstrap':statement,TTerm,TravOut),'/util':assertEqual(TTerm,decoratedAST((builtin:true:-builtin:true),cpi:path(!'foo.ced',[1,2]),[fooMarker(5)])::'/bootstrap':statement,'/bootstrap':typedTerm),'/util':assertEqual(TravOut,decorateAST(cpi:path(!'foo.ced',[1,3]),[]),traversal))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should use only markers for this path in decoration', (traverseDown(decorateAST(cpi:path(!'foo.ced',[1,2,3]),[]),decorateAST(cpi:path(!'foo.ced',[1,2,3]),['/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),fooMarker(5))]), (builtin:true:-builtin:true)::'/bootstrap':statement,decoratedAST(_,_,MarkersOut)::'/bootstrap':statement,decorateAST(_,MarkersFwd)),'/util':assertEqual(MarkersOut,[],'/bootstrap':list('/bootstrap':marker)),'/util':assertEqual(MarkersFwd,['/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),fooMarker(5))],'/bootstrap':list('/bootstrap':locMarker)))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should decorate variables as a single entity', (termTraversal('$VAR$'(!'Name')::'/bootstrap':pred,decorateAST(cpi:path(!'foo.ced',[1]),[]),decorateAST(PathPrime,_),Dec::'/bootstrap':pred),'/util':assertEqual(Dec,decoratedAST('$VAR$'(!'Name'),cpi:path(!'foo.ced',[1]),[]),'/bootstrap':pred),'/util':assertEqual(PathPrime,cpi:path(!'foo.ced',[2]),cpi:path))).
'/util':behavior(decorateAST(Path,Markers)::traversal,!'should pass markers to a variable', (termTraversal('$VAR$'(!'Name')::'/bootstrap':pred,decorateAST(cpi:path(!'foo.ced',[1]),annotation:changeMode(['/bootstrap':marker(cpi:path(!'foo.ced',[2]),fooMarker(2)),'/bootstrap':marker(cpi:path(!'foo.ced',[1]),fooMarker(1))],'/bootstrap':vert)),decorateAST(_,Markers),Dec::'/bootstrap':pred),'/util':assertEqual(Dec,decoratedAST('$VAR$'(!'Name'),cpi:path(!'foo.ced',[1]),[fooMarker(1)]),'/bootstrap':pred),'/util':assertEqual(Markers,['/bootstrap':marker(cpi:path(!'foo.ced',[2]),fooMarker(2))],'/bootstrap':list('/bootstrap':locMarker)))).
annotation:shrink((traverseUp(decorateAST(Path,Markers),TTerm,decorateAST(PathPrime,MarkersPrime)):-pathUp(Path,PathPrime),builtin:catch(builtin:findall(Marker,'/bootstrap':locMarker,annotation:parentheses(check(TTerm,Path,Marker)),MarkersPrimePrime),Exception,MarkersPrimePrime::'/bootstrap':list('/bootstrap':locMarker)=['/bootstrap':marker(Path,'/bootstrap':error('/bootstrap':exceptionThrown(Exception),[]))]::'/bootstrap':list('/bootstrap':locMarker)),'/bootstrap':append(Markers,MarkersPrimePrime,MarkersPrime,'/bootstrap':locMarker))).
annotation:shrink((traverseAtomic(decorateAST(Path,Markers),TTerm1,TTerm2,Trav2):-traverseUp(decorateAST(Path,Markers),TTerm1,Trav1),traverseDown(decorateAST(Path,Markers),Trav1,TTerm1,TTerm2,Trav2))).
annotation:shrink((traverseDown(decorateAST(Path,Markers1),decorateAST(_,Markers2),Term::Type,decoratedAST(Term,Path,MarkersDecor)::Type,decorateAST(PathPrime,Markers3)):-pathLeft(Path,PathPrime),consumeMarkersForPath(Markers2,Path,MarkersDecor,Markers3))).
'/bootstrap':signature(consumeMarkersForPath(Markers2,Path,MarkersDecor,Markers3)::'/bootstrap':pred,[Markers2::'/bootstrap':list('/bootstrap':locMarker),Path::cpi:path,MarkersDecor::'/bootstrap':list('/bootstrap':marker),Markers3::'/bootstrap':list('/bootstrap':locMarker)]).
consumeMarkersForPath([],_,[],[]):-builtin:true.
annotation:shrink((consumeMarkersForPath(['/bootstrap':marker(MPath,Marker)|MarkersIn],Path,MarkersDecor,MarkersOut):-builtin:if(Path::cpi:path=MPath::cpi:path, (MarkersDecor::'/bootstrap':list('/bootstrap':marker)=[Marker|MarkersDecorPrime]::'/bootstrap':list('/bootstrap':marker),MarkersOut::'/bootstrap':list('/bootstrap':locMarker)=MarkersOutPrime::'/bootstrap':list('/bootstrap':locMarker)), (MarkersDecor::'/bootstrap':list('/bootstrap':marker)=MarkersDecorPrime::'/bootstrap':list('/bootstrap':marker),MarkersOut::'/bootstrap':list('/bootstrap':locMarker)=['/bootstrap':marker(MPath,Marker)|MarkersOutPrime]::'/bootstrap':list('/bootstrap':locMarker))),consumeMarkersForPath(MarkersIn,Path,MarkersDecorPrime,MarkersOutPrime))).
annotation:shrink((traverseAround(decorateAST(Path,M1),Var::Type,decoratedAST(Var,Path,M2)::Type,decorateAST(PathPrime,M3)):-astVar(Var::Type),pathLeft(Path,PathPrime),consumeMarkersForPath(M1,Path,M2,M3))).
