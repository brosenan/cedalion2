'/bootstrap':signature(edit(Path,TOld,TNew)::'/Functional':expr('/bootstrap2/commands':action),[Path::cpi:path,TOld::'/bootstrap':typedTerm,TNew::'/bootstrap':typedTerm]).
'/bootstrap':projection(edit(Path,TOld,TNew)::'/Functional':expr('/bootstrap2/commands':action),'/bootstrap':horiz(['/bootstrap':label(!edit),'/bootstrap':vis(TOld::'/bootstrap':typedTerm),'/bootstrap':symbol(8608),'/bootstrap':vis(TNew::'/bootstrap':typedTerm),'/bootstrap':label(!at),'/bootstrap':vis(Path::cpi:path)])).
'/bootstrap':signature(readFileContent(File,Content)::'/bootstrap2/commands':interaction,[File::'/bootstrap':string,Content::'/bootstrap':list('/bootstrap':statement)]).
'/bootstrap':signature(myContainer(Container)::'/bootstrap2/commands':interaction,[Container::'/bootstrap':string]).
'/bootstrap':projection(myContainer(Container)::'/bootstrap2/commands':interaction,'/bootstrap':horiz(['/bootstrap':label(!'my container is'),'/bootstrap':vis(Container::'/bootstrap':string)])).
'/util':behavior(edit(Path,TOld,TNew)::'/Functional':expr('/bootstrap2/commands':action),!'should read the content of a file', ('/Functional':eval('/bootstrap2/commands':simulate([myContainer(!local),readFileContent(File,[ (foo:-builtin:true)])],edit(cpi:path(!'foo.ced',[1,2]),X::T,builtin:fail::'/bootstrap':pred)),'/bootstrap2/commands':action,Next),'/util':assertEqual(File,!'foo.ced','/bootstrap':string))).
'/bootstrap':signature(storeUndo(Cmd)::'/bootstrap2/commands':interaction,[Cmd::'/Functional':expr('/bootstrap2/commands':action)]).
'/bootstrap':signature(storeFileContent(File,Content)::'/bootstrap2/commands':interaction,[File::'/bootstrap':string,Content::'/bootstrap':list('/bootstrap':statement)]).
'/util':behavior(edit(Path,TOld,TNew)::'/Functional':expr('/bootstrap2/commands':action),!'should store the undo operation and new content', ('/Functional':eval('/bootstrap2/commands':simulate([myContainer(!local),readFileContent(!'foo.ced',[ (foo:-builtin:true)]),storeUndo(edit(Path,From,To)),storeFileContent(File,Content)],edit(cpi:path(!'foo.ced',[1,2]),X::T,builtin:fail::'/bootstrap':pred)),'/bootstrap2/commands':action,Next),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,2]),cpi:path),'/util':assertEqual(From,builtin:fail::'/bootstrap':pred,'/bootstrap':typedTerm),'/util':assertEqual(To,builtin:true::'/bootstrap':pred,'/bootstrap':typedTerm),'/util':assertEqual(File,!'foo.ced','/bootstrap':string),'/util':assertEqual(Content,[ (foo:-builtin:fail)],'/bootstrap':list('/bootstrap':statement)))).
annotation:shrink('/Functional':def(edit(cpi:path(File,Path),TOld,TNew),'/bootstrap2/commands':action,'/bootstrap2/commands':seq('/bootstrap2/commands':interact(myContainer(Container)),'/bootstrap2/commands':seq('/bootstrap2/commands':interact(readFileContent(File,Content)),'/bootstrap2/commands':for('/traversal':termTraversal(Content::'/bootstrap':list('/bootstrap':statement),annotation:shrink('/traversal':comp('/traversal':comp('/traversal':skipTo(cpi:path(File,Path)),'/traversal':track(cpi:path(File,[]))),edit(Path,TOld,TNew,Container,UndoOld,UndoNew))),Container,_,ContentPrime::'/bootstrap':list('/bootstrap':statement)),'/bootstrap2/commands':seq('/bootstrap2/commands':interact(storeUndo(edit(cpi:path(File,Path),UndoOld,UndoNew))),'/bootstrap2/commands':interact(storeFileContent(File,ContentPrime)))))))).
'/bootstrap':signature(edit(Path,From,To,Container,UFrom,UTo)::'/traversal':traversal,[Path::'/bootstrap':list('/bootstrap':number),From::'/bootstrap':typedTerm,To::'/bootstrap':typedTerm,Container::'/bootstrap':string,UFrom::'/bootstrap':typedTerm,UTo::'/bootstrap':typedTerm]).
'/util':behavior(edit(Path,From,To,Container,UFrom,UTo)::'/traversal':traversal,!'should remove an element from the path on up', ('/traversal':traverseUp(edit([1,2,3],From,To,Container,UFrom,UTo),_::_,Trav),'/util':assertEqual(Trav,edit([2,3],From,To,Container,UFrom,UTo),'/traversal':traversal))).
'/traversal':traverseUp(edit([_|Path],From,To,Container,UFrom,UTo),_,edit(Path,From,To,Container,UFrom,UTo)):-builtin:true.
'/bootstrap':defAtom(noop::'/traversal':traversal).
'/util':behavior(edit(Path,From,To,Container,UFrom,UTo)::'/traversal':traversal,!'should replace From with To if Path is empty', ('/traversal':traverseAround(edit([],[_|L]::'/bootstrap':list('/bootstrap':number),L::'/bootstrap':list('/bootstrap':number),!local,UFrom,UTo),[1,2]::'/bootstrap':list('/bootstrap':number),After,Noop),'/util':assertEqual(After,[2]::'/bootstrap':list('/bootstrap':number),'/bootstrap':typedTerm),'/util':assertEqual(Noop,noop,'/traversal':traversal))).
'/util':behavior(edit(Path,From,To,Container,UFrom,UTo)::'/traversal':traversal,!'should not replace From with To if Path is not empty',\+'/traversal':traverseAround(edit([1],[_|L]::'/bootstrap':list('/bootstrap':number),L::'/bootstrap':list('/bootstrap':number),!local,UFrom,UTo),[1,2]::'/bootstrap':list('/bootstrap':number),After,Noop)).
'/util':behavior(edit(Path,From,To,Container,UFrom,UTo)::'/traversal':traversal,!'should unify UFrom and UTo with the undo operation', ('/traversal':traverseAround(edit([],[_|L]::'/bootstrap':list('/bootstrap':number),L::'/bootstrap':list('/bootstrap':number),!local,UFrom,UTo),[1,2]::'/bootstrap':list('/bootstrap':number),_,_),'/util':assertStracturallyEqual('/Functional':pair(UFrom,UTo),'/Functional':pair(X::'/bootstrap':list('/bootstrap':number),[1|X]::'/bootstrap':list('/bootstrap':number)),'/Functional':pairType('/bootstrap':typedTerm,'/bootstrap':typedTerm)))).
annotation:shrink(('/traversal':traverseAround(edit([],From,To,Container,UFrom,UTo),Content,ToPrime,noop):-undoOp(Content,From,To,Container,UFrom,UTo),builtin:copyTerm('/Functional':pair(From,To)::'/Functional':pairType('/bootstrap':typedTerm,'/bootstrap':typedTerm),'/Functional':pair(Content,ToPrime)::'/Functional':pairType('/bootstrap':typedTerm,'/bootstrap':typedTerm)))).
