'/bootstrap':signature('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,[TAST::'/bootstrap':typedTerm,TTerm::'/bootstrap':typedTerm,VNs::'/bootstrap':list('/bootstrap':varName)]).
'/util':behavior('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,!'should copy a ground term as is', ('ast2term'([1,2]::'/bootstrap':list('/bootstrap':number),TTerm,_),'/util':assertEqual(TTerm,[1,2]::'/bootstrap':list('/bootstrap':number),'/bootstrap':typedTerm))).
'/util':behavior('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,!'should emit an empty VNs if term is ground', ('ast2term'([1,2]::'/bootstrap':list('/bootstrap':number),_,VNs),'/util':assertEqual(VNs,[],'/bootstrap':list('/bootstrap':varName)))).
'/util':behavior('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,!'should do the oposite of term2ast', (TTerm1='/bootstrap':listMember(Y,'/bootstrap':number,[1,2,X])::'/bootstrap':pred,'term2ast'(TTerm1,[builtin:varName(X::'/bootstrap':number,!'X'),builtin:varName(Y::'/bootstrap':number,!'Y')],!local,TAST),'ast2term'(TAST,TTerm2,VNs),'/util':assertStracturallyEqual(TTerm2,TTerm1,'/bootstrap':typedTerm),'/util':assertStracturallyEqual(VNs,[builtin:varName(X::'/bootstrap':number,!'X'),builtin:varName(Y::'/bootstrap':number,!'Y')],'/bootstrap':list('/bootstrap':varName)))).
'/util':behavior('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,!'should force variables with the same name to be the same variable', (TTerm1='/bootstrap':listMember(Y,'/bootstrap':number,[X,2,X])::'/bootstrap':pred,'term2ast'(TTerm1,[builtin:varName(X::'/bootstrap':number,!'X'),builtin:varName(Y::'/bootstrap':number,!'Y')],!local,TAST),'ast2term'(TAST,TTerm2,VNs),'/util':assertStracturallyEqual(TTerm2,TTerm1,'/bootstrap':typedTerm),'/util':assertStracturallyEqual(VNs,[builtin:varName(X::'/bootstrap':number,!'X'),builtin:varName(Y::'/bootstrap':number,!'Y')],'/bootstrap':list('/bootstrap':varName)))).
'/util':behavior('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,!'should avoid converting $VAR$(X) where X is a variable', (TTerm1='/bootstrap':listMember(Y,'/bootstrap':number,[1,2,'$VAR$'(Name)])::'/bootstrap':pred,'term2ast'(TTerm1,[builtin:varName(Name::'/bootstrap':string,!'X'),builtin:varName(Y::'/bootstrap':number,!'Y')],!local,TAST),'ast2term'(TAST,TTerm2,VNs),'/util':assertStracturallyEqual(TTerm2,TTerm1,'/bootstrap':typedTerm))).
'/util':behavior('ast2term'(TAST,TTerm,VNs)::'/bootstrap':pred,!'should handle singleton variables', ('ast2term'('$VAR$'::'/bootstrap':number,TTerm,VNs),'/bootstrap':true(builtin:var(TTerm)))).
'/bootstrap':signature('ast2term'(VNs)::'/traversal':traversal,[VNs::'/bootstrap':list('/bootstrap':varName)]).
'ast2term'(TAST,TTerm,VNs):-'/traversal':termTraversal(TAST,'ast2term'([]),!local,'ast2term'(VNs),TTerm).
annotation:shrink(('/traversal':traverseAround('ast2term'(VNs),'$VAR$'(Name)::T,Var::T,'ast2term'(VNsPrime)):-builtin:string(Name::'/bootstrap':string),builtin:if('/bootstrap':listMember(builtin:varName(Var::T,Name),'/bootstrap':varName,VNs),VNsPrime::'/bootstrap':list('/bootstrap':varName)=VNs::'/bootstrap':list('/bootstrap':varName),VNsPrime::'/bootstrap':list('/bootstrap':varName)=[builtin:varName(Var::T,Name)|VNs]::'/bootstrap':list('/bootstrap':varName)))).
'/traversal':traverseAround('ast2term'(VNs),'$VAR$'::T,_::T,'ast2term'(VNs)):-builtin:true.
