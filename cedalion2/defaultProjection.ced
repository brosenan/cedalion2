'/bootstrap':signature(defaultProjection(TDAST,Container,Proj)::'/bootstrap':pred,[TDAST::'/bootstrap':typedTerm,Container::'/bootstrap':string,Proj::'/bootstrap':visualization]).
'/util':behavior(defaultProjection(TDAST,Container,Proj)::'/bootstrap':pred,!'should project an atomic compound term as a label', (defaultProjection(builtin:true::'/bootstrap':pred,!test,Proj),'/util':assertEqual(Proj,'/bootstrap':label(!true),'/bootstrap':visualization))).
defaultProjection(TTerm,_,'/bootstrap':label(Name)):-builtin:parseTerm(TTerm,NamePrime,[]),localName(NamePrime,Name).
'/util':behavior(defaultProjection(TDAST,Container,Proj)::'/bootstrap':pred,!'should project a compound term as name(args)', (defaultProjection(builtin:var('$VAR$'::'/bootstrap':number)::'/bootstrap':pred,!test,Proj),'/util':assertEqual(Proj,'/bootstrap':horiz(['/bootstrap':label(!var),'/bootstrap':brackets('/bootstrap':horiz(['/bootstrap':vis(('$VAR$'::'/bootstrap':number)::'/bootstrap':typedTerm)]),40,41)]),'/bootstrap':visualization))).
'/util':behavior(defaultProjection(TDAST,Container,Proj)::'/bootstrap':pred,!'should support multiple arguments', (defaultProjection(builtin:succ('$VAR$'(!'Y'),'$VAR$'(!'X'))::'/bootstrap':pred,!test,Proj),'/util':assertEqual(Proj,'/bootstrap':horiz(['/bootstrap':label(!succ),'/bootstrap':brackets('/bootstrap':horiz(['/bootstrap':vis('$VAR$'(!'Y')::'/bootstrap':number),'/bootstrap':label(! (,)),'/bootstrap':vis('$VAR$'(!'X')::'/bootstrap':number)]),40,41)]),'/bootstrap':visualization))).
annotation:shrink((defaultProjection(TTerm,_,'/bootstrap':horiz(['/bootstrap':label(Name),'/bootstrap':brackets('/bootstrap':horiz(['/bootstrap':vis(First)|RestProj]),40,41)])):-'/bootstrap':safeParseTerm(TTerm,NamePrime,[First|Rest]),localName(NamePrime,Name),projectList(Rest,RestProj))).
'/bootstrap':signature(localName(NamePrime,Name)::'/bootstrap':pred,[NamePrime::'/bootstrap':string,Name::'/bootstrap':string]).
annotation:shrink((localName(NamePrime,Name):-builtin:charCodes(NamePrime,AllCodes),'/bootstrap':append(_,[annotation:minComment(35,!'#')|NameCodes],AllCodes,'/bootstrap':number),builtin:charCodes(Name,NameCodes))).
'/bootstrap':signature(projectList(Rest,RestProj)::'/bootstrap':pred,[Rest::'/bootstrap':list('/bootstrap':typedTerm),RestProj::'/bootstrap':list('/bootstrap':visualization)]).
projectList([],[]):-builtin:true.
projectList([First|Rest],['/bootstrap':label(! (,)),'/bootstrap':vis(First)|RestProj]):-projectList(Rest,RestProj).
