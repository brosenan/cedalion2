'/bootstrap':signature(decorateAST(Path,Container,Markers)::'/traversal':traversal,[Path::cpi:path,Container::'/bootstrap':string,Markers::'/bootstrap':list('/bootstrap':locMarker)]).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should update the path going up', ('/traversal':traverseUp(decorateAST(cpi:path(!'foo.ced',[1,2]),!test,[]), (builtin:true:-builtin:true)::'/bootstrap':statement,decorateAST(Path,_,_)),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,2,1]),cpi:path))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should update the path going left on  atomic', ('/traversal':traverseAtomic(decorateAST(cpi:path(!'foo.ced',[1,2]),!test,[]),2::'/bootstrap':number,_::_,decorateAST(Path,_,_)),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,3]),cpi:path))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should update the path going down', ('/traversal':traverseDown(decorateAST(cpi:path(!'foo.ced',[1,2]),!test,[]),decorateAST(cpi:path(!'foo.ced',[1,2,3]),!test,[]), (builtin:true:-builtin:true)::'/bootstrap':statement,_::_,decorateAST(Path,_,_)),'/util':assertEqual(Path,cpi:path(!'foo.ced',[1,3]),cpi:path))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should consult check in the container going up', ('/traversal':traverseUp(decorateAST(cpi:path(!'foo.ced',[1,2]),!test,['/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap':varType(X::'/bootstrap':number))]),'/bootstrap2':foo(5)::'/bootstrap2':bar,decorateAST(_,ContainerPrime,Markers)),'/util':assertEqual(Markers,['/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap':varType(X::'/bootstrap':number)),'/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),'/bootstrap2':fooMarker(5))],'/bootstrap':list('/bootstrap':locMarker)),'/util':assertEqual(ContainerPrime,!test,'/bootstrap':string))).
'/bootstrap':signature(decoratedAST(Term,Path,Markers)::Type,[Term::Type,Path::cpi:path,Markers::'/bootstrap':list('/bootstrap':marker)]).
'/bootstrap':projection(decoratedAST(Term,Path,Markers)::Type,'/bootstrap':lineBorder('/bootstrap':vert(['/bootstrap':vis(Term::Type),'/bootstrap':halfSize('/bootstrap':horiz(['/bootstrap':vis(Path::cpi:path),cpi:vis(Markers::'/bootstrap':list('/bootstrap':marker),'/bootstrap':vert)]))]),1,cpi:rgb(0,0,255))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should decorate the terms going down', ('/traversal':traverseDown(decorateAST(cpi:path(!'foo.ced',[1,2]),!test,[]),decorateAST(cpi:path(!'foo.ced',[1,2,3]),!test,['/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),'/bootstrap2':fooMarker(5))]), (builtin:true:-builtin:true)::'/bootstrap':statement,TTerm,TravOut),'/util':assertEqual(TTerm,decoratedAST((builtin:true:-builtin:true),cpi:path(!'foo.ced',[1,2]),['/bootstrap2':fooMarker(5)])::'/bootstrap':statement,'/bootstrap':typedTerm),'/util':assertEqual(TravOut,decorateAST(cpi:path(!'foo.ced',[1,3]),!test,[]),'/traversal':traversal))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should use only markers for this path in decoration', ('/traversal':traverseDown(decorateAST(cpi:path(!'foo.ced',[1,2,3]),!test,[]),decorateAST(cpi:path(!'foo.ced',[1,2,3]),!test,['/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),'/bootstrap2':fooMarker(5))]), (builtin:true:-builtin:true)::'/bootstrap':statement,decoratedAST(_,_,MarkersOut)::'/bootstrap':statement,decorateAST(_,_,MarkersFwd)),'/util':assertEqual(MarkersOut,[],'/bootstrap':list('/bootstrap':marker)),'/util':assertEqual(MarkersFwd,['/bootstrap':marker(cpi:path(!'foo.ced',[1,2]),'/bootstrap2':fooMarker(5))],'/bootstrap':list('/bootstrap':locMarker)))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should decorate variables as a single entity', ('/traversal':termTraversal('$VAR$'(!'Name')::'/bootstrap':pred,decorateAST(cpi:path(!'foo.ced',[1]),!test,[]),!local,decorateAST(PathPrime,_,_),Dec::'/bootstrap':pred),'/util':assertEqual(Dec,decoratedAST('$VAR$'(!'Name'),cpi:path(!'foo.ced',[1]),[]),'/bootstrap':pred),'/util':assertEqual(PathPrime,cpi:path(!'foo.ced',[2]),cpi:path))).
'/util':behavior(decorateAST(Path,Container,Markers)::'/traversal':traversal,!'should pass markers to a variable', ('/traversal':termTraversal('$VAR$'(!'Name')::'/bootstrap':pred,decorateAST(cpi:path(!'foo.ced',[1]),!test,annotation:changeMode(['/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap2':fooMarker(2)),'/bootstrap':marker(cpi:path(!'foo.ced',[1]),'/bootstrap2':fooMarker(1))],'/bootstrap':vert)),!local,decorateAST(_,_,Markers),Dec::'/bootstrap':pred),'/util':assertEqual(Dec,decoratedAST('$VAR$'(!'Name'),cpi:path(!'foo.ced',[1]),['/bootstrap2':fooMarker(1)]),'/bootstrap':pred),'/util':assertEqual(Markers,['/bootstrap':marker(cpi:path(!'foo.ced',[2]),'/bootstrap2':fooMarker(2))],'/bootstrap':list('/bootstrap':locMarker)))).
annotation:shrink(('/traversal':traverseUp(decorateAST(Path,Container,Markers),TTerm,decorateAST(PathPrime,Container,MarkersPrime)):-'/traversal':pathUp(Path,PathPrime),builtin:findall(Marker,'/bootstrap':locMarker,annotation:parentheses(tryInContainer('/bootstrap2':check(TTerm,Path,Marker),Container,Exception,Marker::'/bootstrap':locMarker='/bootstrap':marker(Path,'/bootstrap':error('/bootstrap':exceptionThrown(Exception),[]))::'/bootstrap':locMarker)),MarkersPrimePrime),'/bootstrap':append(Markers,MarkersPrimePrime,MarkersPrime,'/bootstrap':locMarker))).
annotation:shrink(('/traversal':traverseAtomic(decorateAST(Path,Container,Markers),TTerm1,TTerm2,Trav2):-'/traversal':traverseUp(decorateAST(Path,Container,Markers),TTerm1,Trav1),'/traversal':traverseDown(decorateAST(Path,Container,Markers),Trav1,TTerm1,TTerm2,Trav2))).
annotation:shrink(('/traversal':traverseDown(decorateAST(Path,Container,Markers1),decorateAST(_,_,Markers2),Term::Type,decoratedAST(Term,Path,MarkersDecor)::Type,decorateAST(PathPrime,Container,Markers3)):-'/traversal':pathLeft(Path,PathPrime),consumeMarkersForPath(Markers2,Path,MarkersDecor,Markers3))).
'/bootstrap':signature(consumeMarkersForPath(Markers2,Path,MarkersDecor,Markers3)::'/bootstrap':pred,[Markers2::'/bootstrap':list('/bootstrap':locMarker),Path::cpi:path,MarkersDecor::'/bootstrap':list('/bootstrap':marker),Markers3::'/bootstrap':list('/bootstrap':locMarker)]).
consumeMarkersForPath([],_,[],[]):-builtin:true.
annotation:shrink((consumeMarkersForPath(['/bootstrap':marker(MPath,Marker)|MarkersIn],Path,MarkersDecor,MarkersOut):-builtin:if(Path::cpi:path=MPath::cpi:path, (MarkersDecor::'/bootstrap':list('/bootstrap':marker)=[Marker|MarkersDecorPrime]::'/bootstrap':list('/bootstrap':marker),MarkersOut::'/bootstrap':list('/bootstrap':locMarker)=MarkersOutPrime::'/bootstrap':list('/bootstrap':locMarker)), (MarkersDecor::'/bootstrap':list('/bootstrap':marker)=MarkersDecorPrime::'/bootstrap':list('/bootstrap':marker),MarkersOut::'/bootstrap':list('/bootstrap':locMarker)=['/bootstrap':marker(MPath,Marker)|MarkersOutPrime]::'/bootstrap':list('/bootstrap':locMarker))),consumeMarkersForPath(MarkersIn,Path,MarkersDecorPrime,MarkersOutPrime))).
annotation:shrink(('/traversal':traverseAround(decorateAST(Path,Container,M1),Var::Type,decoratedAST(Var,Path,M2)::Type,decorateAST(PathPrime,Container,M3)):-astVar(Var::Type),'/traversal':pathLeft(Path,PathPrime),consumeMarkersForPath(M1,Path,M2,M3))).
