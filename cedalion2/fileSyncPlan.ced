'/bootstrap':signature(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,[Dir::'/bootstrap':string,New::'/bootstrap':list('/bootstrap':string),Old::'/bootstrap':list('/bootstrap':string),Container::'/bootstrap':string,Plan::'/impred':impred]).
'/util':behavior(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,!'should create a trivial plan for empty lists',fileSyncPlan(_,[],[],_,'/impred':true)).
'/util':behavior(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,!'should ignore empty lines', ('/bootstrap':true(fileSyncPlan(_,[!''],[],_,'/impred':conj('/impred':true,'/impred':true))),'/bootstrap':true(fileSyncPlan(_,[],[!''],_,'/impred':conj('/impred':true,'/impred':true))))).
'/util':behavior(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,!'should plan loading files in New if Old is empty', (fileSyncPlan(!'/foo',[!'./bar/baz.ced,1234'],[],!myContainer,Plan),'/util':assertEqual(Plan,annotation:parentheses('/impred':conj('/impred':loadSourceFileToContainer(!'/foo/bar/baz.ced',!'/bar',!myContainer),'/impred':true)),'/impred':impred))).
'/util':behavior(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,!'should ignore identical lines in both Old and New', (fileSyncPlan(!'/foo',[!'./bar/baz.ced,1234',!''],[!'./bar/baz.ced,1234',!''],!myContainer,Plan),'/util':assertEqual(Plan,annotation:parentheses('/impred':true),'/impred':impred))).
'/util':behavior(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,!'should plan removing files in Old if New is empty', (fileSyncPlan(!'/foo',[],[!'./bar/baz.ced,1234'],!myContainer,Plan),'/util':assertEqual(Plan,annotation:parentheses('/impred':conj('/impred':removeSourceFileFromContainer(!'/foo/bar/baz.ced',!myContainer),'/impred':true)),'/impred':impred))).
'/util':behavior(fileSyncPlan(Dir,New,Old,Container,Plan)::'/bootstrap':pred,!'should plan borh loading and removing in case both exist, in lexicographic order', (fileSyncPlan(!'/foo',[!'./bar/baz.ced,2345'],[!'./bar/baz.ced,1234'],!myContainer,Plan),'/util':assertEqual(Plan,annotation:parentheses('/impred':conj('/impred':removeSourceFileFromContainer(!'/foo/bar/baz.ced',!myContainer),'/impred':conj('/impred':loadSourceFileToContainer(!'/foo/bar/baz.ced',!'/bar',!myContainer),'/impred':true))),'/impred':impred))).
fileSyncPlan(Dir,[],[],Container,'/impred':true):-builtin:true.
annotation:shrink((fileSyncPlan(Dir,[Line|New],[],Container,Plan):-Plan::'/impred':impred='/impred':conj(PlanToLoad,PlanPrime)::'/impred':impred,planToLoadSourceFileToContainer(Line,Dir,Container,PlanToLoad),fileSyncPlan(Dir,New,[],Container,PlanPrime))).
annotation:shrink((fileSyncPlan(Dir,[],[LinePrime|Old],Container,Plan):-Plan::'/impred':impred='/impred':conj(RemoveSource,PlanPrime)::'/impred':impred,planToRemoveSourceFileFromContainer(LinePrime,Dir,Container,RemoveSource),fileSyncPlan(Dir,[],Old,Container,PlanPrime))).
annotation:shrink((fileSyncPlan(Dir,[Line|New],[LinePrime|Old],Container,Plan):-builtin:if(Line::'/bootstrap':string=LinePrime::'/bootstrap':string,fileSyncPlan(Dir,New,Old,Container,Plan),builtin:if(Line::'/bootstrap':string=annotation:minComment(!''::'/bootstrap':string,!'empty string'),fileSyncPlan(Dir,New,Old,Container,Plan), (Plan::'/impred':impred='/impred':conj(FirstPlan,PlanPrime)::'/impred':impred,builtin:if(lexLessThan(Line,LinePrime), (planToLoadSourceFileToContainer(Line,Dir,Container,FirstPlan),fileSyncPlan(Dir,New,[LinePrime|Old],Container,PlanPrime)), (planToRemoveSourceFileFromContainer(Line,Dir,Container,FirstPlan),fileSyncPlan(Dir,[Line|New],Old,Container,PlanPrime)))))))).
'/bootstrap':signature(parseFileStatLine(Line,NS,FileName)::'/bootstrap':pred,[Line::'/bootstrap':string,NS::'/bootstrap':string,FileName::'/bootstrap':string]).
'/util':behavior(parseFileStatLine(Line,NS,FileName)::'/bootstrap':pred,!'should parse ./bar/baz.ced,1234',parseFileStatLine(!'./bar/baz.ced,1234',NS,FileName)).
annotation:shrink((parseFileStatLine(Line,NS,FileName):-'/parsing':parseString('/parsing':follow('/parsing':follow('/parsing':follow('/parsing':follow('/parsing':char(!.),'/parsing':follow('/parsing':bind('/parsing':oneOrMore('/parsing':charRange(!' ',!'~')),NSCodes),'/parsing':char(! (/)))),'/parsing':bind('/parsing':oneOrMore('/parsing':not(! (/))),FileNameCodes)),'/parsing':char(! (,))),'/parsing':oneOrMore('/parsing':charRange(!'0',!'9'))),Line),builtin:charCodes(NS,NSCodes),builtin:charCodes(FileName,FileNameCodes))).
'/bootstrap':signature(planToLoadSourceFileToContainer(Line,Dir,Container,Plan)::'/bootstrap':pred,[Line::'/bootstrap':string,Dir::'/bootstrap':string,Container::'/bootstrap':string,Plan::'/impred':impred]).
annotation:shrink((planToLoadSourceFileToContainer(Line,Dir,Container,Plan):-builtin:if(Line::'/bootstrap':string=annotation:minComment(!'',!'empty strin')::'/bootstrap':string,Plan::'/impred':impred='/impred':true::'/impred':impred, (parseFileStatLine(Line,NS,FileName),'/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(Dir),'/Functional':concat,'/Functional':const(NS)),'/Functional':concat,'/Functional':const(! (/))),'/Functional':concat,'/Functional':const(FileName)),'/bootstrap':string,FullPath),Plan::'/impred':impred='/impred':loadSourceFileToContainer(FullPath,NS,Container)::'/impred':impred)))).
'/bootstrap':signature(planToRemoveSourceFileFromContainer(Line,Dir,Container,RemoveSource)::'/bootstrap':pred,[Line::'/bootstrap':string,Dir::'/bootstrap':string,Container::'/bootstrap':string,RemoveSource::'/impred':impred]).
annotation:shrink((planToRemoveSourceFileFromContainer(Line,Dir,Container,RemoveSource):-builtin:if(Line::'/bootstrap':string=annotation:minComment(!'',!'empty strin')::'/bootstrap':string,RemoveSource::'/impred':impred='/impred':true::'/impred':impred, (parseFileStatLine(Line,NS,FileName),'/Functional':eval('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(Dir),'/Functional':concat,'/Functional':const(NS)),'/Functional':concat,'/Functional':const(! (/))),'/Functional':concat,'/Functional':const(FileName)),'/bootstrap':string,FullPath),RemoveSource::'/impred':impred='/impred':removeSourceFileFromContainer(FullPath,Container)::'/impred':impred)))).
