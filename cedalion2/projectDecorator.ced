'/bootstrap':signature(projectDecorator(TDec,Mode,Container,Proj)::'/bootstrap':pred,[TDec::'/bootstrap':typedTerm,Mode::'/bootstrap':mode,Container::'/bootstrap':string,Proj::'/bootstrap':visualization]).
'/bootstrap':signature(placeholder(Vis,Path,Unique)::'/bootstrap':visualization,[Vis::'/bootstrap':visualization,Path::cpi:path,Unique::'/bootstrap':string]).
'/util':behavior(projectDecorator(TDec,Mode,Container,Proj)::'/bootstrap':pred,!'should project the underlying term and place it in a placeholder', (projectDecorator(decoratedAST(3,cpi:path(!'bar.ced',[3,5]),[])::'/bootstrap':number,cpi:default,!test,Proj),'/util':assertEqual(Proj,placeholder('/bootstrap':label(!'3'),cpi:path(!'bar.ced',[3,5]),!'3'),'/bootstrap':visualization))).
'/util':behavior(projectDecorator(TDec,Mode,Container,Proj)::'/bootstrap':pred,!'should consult the Container with Mode', (projectDecorator(decoratedAST(foo,cpi:path(!'bar.ced',[3,5]),[])::'/bootstrap':pred,fooMode,!test,Proj),'/util':assertEqual(Proj,placeholder('/bootstrap':label(!'FOO'),cpi:path(!'bar.ced',[3,5]),!'/cedalion2#foo'),'/bootstrap':visualization))).
'/util':behavior(projectDecorator(TDec,Mode,Container,Proj)::'/bootstrap':pred,!'should recusrively apply itself to child terms', (projectDecorator(decoratedAST('/bootstrap2':foo(decoratedAST(4,cpi:path(!'bar.ced',[3,5,1]),[])),cpi:path(!'bar.ced',[3,5]),[])::'/bootstrap2':bar,fooMode,!test,placeholder(Proj,_,_)),'/util':assertEqual(Proj,'/bootstrap':vert(['/bootstrap':label(!foo),placeholder('/bootstrap':label(!'4'),cpi:path(!'bar.ced',[3,5,1]),!'4')]),'/bootstrap':visualization))).
'/util':behavior(projectDecorator(TDec,Mode,Container,Proj)::'/bootstrap':pred,!'should apply markers to Proj', (Markers::'/bootstrap':list('/bootstrap':marker)=['/bootstrap2':fooMarker(1),'/bootstrap2':fooMarker(2),'/bootstrap2':fooMarker(3)]::'/bootstrap':list('/bootstrap':marker),projectDecorator(decoratedAST(foo,cpi:path(!'bar.ced',[3,5]),Markers)::'/bootstrap':pred,fooMode,!test,placeholder(Proj,_,_)),'/util':assertEqual(Proj,'/bootstrap':horiz(['/bootstrap':horiz(['/bootstrap':horiz(['/bootstrap':label(!'FOO'),'/bootstrap':label(!'1')]),'/bootstrap':label(!'2')]),'/bootstrap':label(!'3')]),'/bootstrap':visualization))).
annotation:shrink((projectDecorator(decoratedAST(Term,Path,Markers)::Type,Mode,Container,placeholder(ProjPrimePrime,Path,Unique)):-project(Term::Type,Mode,Container,Proj),termUnique(Term::Type,Unique),'/traversal':termTraversal(Proj::'/bootstrap':visualization,replaceVisTerm(Container),_,ProjPrime::'/bootstrap':visualization),applyMarkers(Markers,Container,ProjPrime,ProjPrimePrime))).
'/bootstrap':signature(replaceVisTerm(Container)::'/traversal':traversal,[Container::'/bootstrap':string]).
annotation:shrink(('/traversal':traverseAround(replaceVisTerm(Container),'/bootstrap':vis(TTerm)::'/bootstrap':visualization,Proj::'/bootstrap':visualization,replaceVisTerm(Container)):-projectDecorator(TTerm,cpi:default,Container,Proj))).
'/bootstrap':signature(applyMarkers(Markers,Container,ProjIn,ProjOut)::'/bootstrap':pred,[Markers::'/bootstrap':list('/bootstrap':marker),Container::'/bootstrap':string,ProjIn::'/bootstrap':visualization,ProjOut::'/bootstrap':visualization]).
applyMarkers([],_,Proj,Proj):-builtin:true.
annotation:shrink((applyMarkers([Marker|Markers],Container,ProjIn,ProjOut):-tryInContainer('/bootstrap':applyMarker(Marker,ProjIn,ProjMid),Container,Exception,ProjMid::'/bootstrap':visualization='/bootstrap':horiz(['/bootstrap':tooltip('/bootstrap':color('/bootstrap':label(!'E'),cpi:rgb(255,0,0)),'/bootstrap':vis(cpi:immediateDescriptor(Exception,[])::'/bootstrap':exception)),ProjIn])::'/bootstrap':visualization),applyMarkers(Markers,Container,ProjMid,ProjOut))).
'test@/bootstrap':userVisualization('test@/cedalion2':foo::'test@/bootstrap':pred,'test@/cedalion2':fooMode,_,'test@/bootstrap':label(!'FOO')):-builtin:true.
'test@/bootstrap':applyMarker('test@/bootstrap2':fooMarker(N),Proj,'test@/bootstrap':horiz([Proj,'test@/bootstrap':label(Str)])):-'/Functional':eval('/Functional':'num2str'('/Functional':const(N)),'/bootstrap':string,Str).
