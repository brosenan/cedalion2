'/bootstrap':signature(termUnique(TTerm,Unique)::'/bootstrap':pred,[TTerm::'/bootstrap':typedTerm,Unique::'/bootstrap':string]).
'/util':behavior(termUnique(TTerm,Unique)::'/bootstrap':pred,!'should unify Unique with the name of an atomic compound', (termUnique([]::'/bootstrap':list(_),Unique),'/util':assertEqual(Unique,![],'/bootstrap':string))).
'/util':behavior(termUnique(TTerm,Unique)::'/bootstrap':pred,!'should add the unique of the first argument if not an atomic compound', (termUnique((builtin:succ(2,3)::'/bootstrap':pred)::'/bootstrap':typedTerm,Unique),'/util':assertEqual(Unique,!':::builtin#succ:2','/bootstrap':string))).
'/util':behavior(termUnique(TTerm,Unique)::'/bootstrap':pred,!'should omit decorators', (termUnique((builtin:succ(decoratedAST(2,cpi:path(!'foo.ced',[1]),[]),3)::'/bootstrap':pred)::'/bootstrap':typedTerm,Unique),'/util':assertEqual(Unique,!':::builtin#succ:2','/bootstrap':string))).
annotation:shrink((termUnique(TTerm,Unique):-astCompund(TTerm),builtin:if(TTerm=decoratedAST(Term,_,_)::Type,termUnique(Term::Type,Unique), (builtin:parseTerm(TTerm,UniquePrime,Args),builtin:if(Args::'/bootstrap':list('/bootstrap':typedTerm)=[First|_]::'/bootstrap':list('/bootstrap':typedTerm),'/Functional':eval('/Functional':where('/Functional':applyBinOp('/Functional':applyBinOp('/Functional':const(UniquePrime),'/Functional':concat,'/Functional':const(! (:))),'/Functional':concat,'/Functional':const(FirstUnique)),termUnique(First,FirstUnique)),'/bootstrap':string,Unique),Unique::'/bootstrap':string=UniquePrime::'/bootstrap':string))))).
'/util':behavior(termUnique(TTerm,Unique)::'/bootstrap':pred,!'should unify Unique with the string corresponding to a number', (termUnique(3::'/bootstrap':number,Unique),'/util':assertEqual(Unique,!'3','/bootstrap':string))).
termUnique(Num::'/bootstrap':number,Unique):-builtin:number(Num::'/bootstrap':number),'/Functional':eval('/Functional':'num2str'('/Functional':const(Num)),'/bootstrap':string,Unique).
'/util':behavior(termUnique(TTerm,Unique)::'/bootstrap':pred,!'should unify Unique with the string if TTerm is a string', (termUnique(!foo::'/bootstrap':string,Unique),'/util':assertEqual(Unique,!foo,'/bootstrap':string))).
termUnique(Str::'/bootstrap':string,Str):-builtin:string(Str::'/bootstrap':string).
'/util':behavior(termUnique(TTerm,Unique)::'/bootstrap':pred,!'should unify Unique with an empty string if TTerm is an AST variable', (termUnique('$VAR$'(!foo)::'/bootstrap':string,Unique),'/util':assertEqual(Unique,!'','/bootstrap':string))).
termUnique(TTerm,!''):-astVar(TTerm).
